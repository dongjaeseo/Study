# -*- coding: utf-8 -*-
"""diabetes1.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q-lqdxKK41XTxsb-w7UqHKxDeByLfmxr
"""

import numpy as np

from sklearn.datasets import load_diabetes

dataset = load_diabetes()
x = dataset.data
y = dataset.target


from sklearn.model_selection import train_test_split as tts
x_train,x_test,y_train,y_test = tts(x,y,train_size = 0.8, shuffle = True)

from sklearn.model_selection import train_test_split as tts
x_train,x_val,y_train,y_val = tts(x_train,y_train,train_size = 0.8, shuffle = True)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(x_train)
x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)
x_val = scaler.transform(x_val)


#2. model
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import Dense, Input

input = Input(shape = (10,))
d = Dense(64, activation = 'relu')(input)
d = Dense(64)(d)
d = Dense(64)(d)
d = Dense(64)(d)
d = Dense(64)(d)
d = Dense(64)(d)
d = Dense(1)(d)

model = Model(inputs = input, outputs = d)

from tensorflow.keras.callbacks import EarlyStopping
early_stopping = EarlyStopping(monitor = 'loss', patience = 10, mode = 'auto')

#3. compile fit
model.compile(loss = 'mse', optimizer = 'adam', metrics = 'mae')
model.fit(x_train,y_train,epochs = 2000, validation_data = (x_val,y_val), batch_size = 8, callbacks = [early_stopping])

#4. evaluation, predict
loss, mae = model.evaluate(x_test,y_test, batch_size = 8)
print('loss : ', loss)
print('mae : ',mae)

y_pred = model.predict(x_test)

from sklearn.metrics import mean_squared_error, r2_score
def rmse(a,b):
  return np.sqrt(mean_squared_error(a,b))

print('r2 : ', r2_score(y_pred,y_test))

M